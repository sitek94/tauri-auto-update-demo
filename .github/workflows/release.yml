name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: macos
            os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      # - name: Setup Rust
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: ${{ matrix.target }}
      # - uses: Swatinem/rust-cache@v2
      #   with:
      #     key: ${{ matrix.target }}

      # - name: Build Frontend
      #   run: bun frontend:build

      # - name: Install Rust target
      #   run: rustup target add ${{ matrix.target }}

      # - name: Build Tauri
      #   run: bun tauri:build --target ${{ matrix.target }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: artifacts-${{ matrix.arch }}
          path: |
            ./src-tauri/target/${{ matrix.target }}/release/bundle/dmg/**.dmg
            ./src-tauri/target/${{ matrix.target }}/release/bundle/macos/**.app.*

  release:
    name: Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Setup git user
        run: |
          git config --global user.name "maciek-bot"
          git config --global user.email "maciek.gh.bot@gmail.com"

      - name: Set new version
        id: set_version
        # Currently, there is no way to customize PR title and commit message in the action. As a workaround,
        # we can use `changeset status` command to get the new version and then use it in the next steps.
        # ðŸ”— See: https://github.com/changesets/action/issues/303#issuecomment-1888167265
        run: |
          bun changeset status --output=release.json || true
          if [ -f release.json ]; then
            echo "NEW_VERSION=$(jq -r '.releases[0].newVersion' release.json)" >> $GITHUB_OUTPUT
            echo "HAS_CHANGESETS=$(jq -r '.changesets | length > 0' release.json)" >> $GITHUB_OUTPUT
            rm release.json
          fi

      - name: Download artifacts
        if: steps.set_version.outputs.HAS_CHANGESETS == 'false'
        uses: actions/download-artifact@v4
        with:
          name: artifacts-aarch64
          path: artifacts/aarch64

      - name: Rename artifacts
        if: steps.set_version.outputs.HAS_CHANGESETS == 'false'
        run: |
          mv "artifacts/aarch64/dmg/tauri-auto-update-demo_${{ steps.set_version.outputs.NEW_VERSION }}_aarch64.dmg" "artifacts/tauri-auto-update-demo_${{ steps.set_version.outputs.NEW_VERSION }}_macos_aarch64.dmg"
          mv "artifacts/aarch64/macos/tauri-auto-update-demo.app.tar.gz" "artifacts/tauri-auto-update-demo_${{ steps.set_version.outputs.NEW_VERSION }}_macos_aarch64.app.tar.gz"
          mv "artifacts/aarch64/macos/tauri-auto-update-demo.app.tar.gz.sig" "artifacts/tauri-auto-update-demo_${{ steps.set_version.outputs.NEW_VERSION }}_macos_aarch64.app.tar.gz.sig"

      - name: Create Release Pull Request
        uses: changesets/action@v1
        with:
          title: 'release v${{ steps.set_version.outputs.NEW_VERSION }}'
          commit: 'release v${{ steps.set_version.outputs.NEW_VERSION }}'
          setupGitUser: false
          publish: bun run publish
          version: bun run version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_BOT_PAT }}
